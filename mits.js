const a=require("fs"),b=require("vm"),c=require("path"),{spawn:d,exec:e}=require("child_process");function f(...g){console.log(...g);}class h{constructor(...i){this.v=i;}j(i){return new h(...this.v.map((v,k)=>v+i.v[k]));}toString(){return`Vector(${this.v.join(",")})`}}class k{constructor(i,l,m=1){this.s=i;this.e=l;this.t=m;}*[Symbol.iterator](){for(let n=this.s;n<=this.e;n+=this.t)yield n;}}let o={};try{const{Board:p,Led:q}=require("johnny-five");const r=new p();r.on("ready",()=>{o.board=r;f("Hardware ready");});}catch(s){f("Hardware disabled");}const t={files:{},w:(u,v)=>{t.files[u]=v;},r:(u)=>t.files[u]||"",x:(u)=>!!t.files[u],d:(u)=>{delete t.files[u];}};class y{constructor(u,v){this.n=u;this.fn=v;this.r=false;}z(){this.r=true;this.fn();}}const A={tasks:[],add:(v)=>A.tasks.push(v),run:()=>A.tasks.forEach(v=>v.r||v.z())};const B={run:(v,w=[],x)=>d(v,w,{shell:true,stdio:"inherit"}),exec:(v,x)=>e(v,(y,z,C)=>x(y,z,C))};const D={get:async(v)=>{const w=require("node-fetch");return await(await w(v)).text();}};const E={run:v=>{try{const{PythonShell:w}=require("python-shell");new w.runString(v,{},()=>{});}catch(x){f("Python unavailable");}},eval:v=>new Promise(w=>{try{const{PythonShell:x}=require("python-shell");new x.runString(`print(${v})`,{mode:"text"},(y,z)=>w(z));}catch(y){w("Python eval unavailable");}})};const F={load:v=>{try{return require("ffi-napi").Library(v,{});}catch(w){f("FFI load failed");return null;}}};const G={run:(v,w,x=[])=>{const y=a.readFileSync(v);return WebAssembly.instantiate(y).then(z=>z.instance.exports[w](...x));}};const H={send:v=>f("Quantum instruction:",v),simulate:v=>f("Quantum simulate:",v)};const I={control:v=>f("Drone command:",v),wait:v=>new Promise(w=>setTimeout(w,v))};const J={write:async(v,w)=>a.promises.writeFile(v,w),read:async(v)=>a.promises.readFile(v,"utf-8"),delete:async(v)=>a.promises.unlink(v),list:async(v)=>a.promises.readdir(v),watch:(v,w)=>a.watch(v,(x,y)=>w(x,y))};const K={createWindow:async(v,w,x)=>({title:v,w:h,h:x,drawText:(y)=>f(`[${v}] ${y}`)})};const L={spawn:async(v,w=[])=>new Promise(x=>{const p=d(v,w,{shell:true});let r="";p.stdout.on("data",s=>r+=s);p.on("close",()=>x({output:()=>r}));})};const M={};async function N(v){const w=c.resolve(v);if(M[w])return M[w];if(!a.existsSync(w))throw new Error(`Module not found: ${w}`);let x=a.readFileSync(w,"utf-8");x=O(x);const y=b.createContext({console,f,h,k,o,t,A,y,B,D,E,F,G,H,I,N,setTimeout,setInterval,require,module,__dirname,J,K,L});let z={};y.module={exports:z};y.exports=z;new b.Script(x,{filename:w}).runInContext(y);M[w]=y.module.exports;return y.module.exports;}function O(v){v=v.replace(/\bprint\s+(.+?);/g,"console.log($1);");v=v.replace(/async for (\w+) in (\w+) \{([\s\S]*?)\}/g,(_,w,x,y)=>`for(const ${w} of ${x}){await (async()=>{${y}})();}`);v=v.replace(/"""\n?([\s\S]*?)\n?"""/g,"`$1`");return v;}async function P(v){const w=c.resolve(v);if(!a.existsSync(w)){console.error("File not found");process.exit(1);}let x=a.readFileSync(w,"utf-8");let y=O(x);const z=b.createContext({console,f,h,k,o,t,A,y,B,D,E,F,G,H,I,N,setTimeout,setInterval,require,module,__dirname,J,K,L});try{await new b.Script(y,{filename:w}).runInContext(z);}catch(x){console.error("MitScripts Runtime Error:",x);}}(async()=>{const v=process.argv.slice(2);if(v.length===0){console.log("Usage: node mit.js <file.mits>");process.exit(0);}await P(v[0]);})();const LS={file:"mitscripts_localstorage.json",data:{},_load(){try{this.data=JSON.parse(a.readFileSync(this.file,"utf-8"))}catch(e){this.data={}}},_save(){a.writeFileSync(this.file,JSON.stringify(this.data))},setItem(k,v){this.data[k]=v;this._save()},getItem(k){return this.data[k]??null},removeItem(k){delete this.data[k];this._save()},clear(){this.data={};this._save()}};LS._load();const htmlcontent=html=>{const w=K.createWindow("HTML Window",600,400);w.drawHTML(html);return w;};const HW={board:null,init:()=>{try{const{Board,Led}=require("johnny-five");HW.board=new Board();HW.board.on("ready",()=>console.log("Hardware Ready"))}catch(e){console.log("Hardware Disabled")}},led:(pin,state)=>{if(HW.board){const l=new(require("johnny-five").Led)(pin);state?l.on():l.off()}},digitalWrite:(pin,val)=>{if(HW.board)HW.board.digitalWrite(pin,val)},digitalRead:(pin,cb)=>{if(HW.board)HW.board.digitalRead(pin,cb)},analogRead:(pin,cb)=>{if(HW.board)HW.board.analogRead(pin,cb)},servo:(pin,deg)=>{if(HW.board){const s=new(require("johnny-five").Servo)(pin);s.to(deg)}}};
HW.init(); const Torch={Tensor:(arr)=>({data:arr,shape:[arr.length],add:(t)=>Torch.Tensor(arr.map((v,i)=>v+t.data[i]||v)),mul:(v)=>Torch.Tensor(arr.map(x=>x*v)),print:function(){console.log("Tensor",this.data)}}),rand:(len)=>Torch.Tensor(Array.from({length:len},()=>Math.random())),zeros:(len)=>Torch.Tensor(Array(len).fill(0)),dot:(a,b)=>a.data.reduce((s,v,i)=>s+v*b.data[i],0)};
